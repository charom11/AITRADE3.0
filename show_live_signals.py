#!/usr/bin/env python3
"""
Live Trading Signals Display
Shows actual live trading signals being generated by the enhanced system
"""

import time
import json
from datetime import datetime, timedelta
from enhanced_trading_system import EnhancedTradingSystem
from file_manager import FileManager

def show_live_trading_signals(duration_minutes=10):
    """Show live trading signals for specified duration"""
    print("🎯 LIVE TRADING SIGNALS - ENHANCED SYSTEM")
    print("=" * 60)
    print(f"Duration: {duration_minutes} minutes")
    print("Press Ctrl+C to stop early\n")
    
    # Initialize system
    system = EnhancedTradingSystem()
    
    # Start data streams
    system.data_manager.start_data_streams(system.trading_pairs)
    
    start_time = datetime.now()
    end_time = start_time + timedelta(minutes=duration_minutes)
    
    signal_count = 0
    last_signal_time = {}
    
    try:
        while datetime.now() < end_time:
            current_time = datetime.now()
            
            # Check for new signals for each symbol
            for symbol in system.trading_pairs:
                # Refresh simulated data
                system.data_manager._simulate_data_stream(symbol)
                
                # Get latest data
                market_data = system.data_manager.get_latest_data(symbol)
                
                if market_data:
                    # Convert to DataFrame for analysis
                    import pandas as pd
                    from dataclasses import asdict
                    df = pd.DataFrame([asdict(market_data)])
                    
                    # Generate signal
                    signal = system.signal_generator.generate_signal(df, symbol)
                    
                    if signal:
                        # Check if this is a new signal (avoid duplicates)
                        signal_key = f"{symbol}_{signal.signal_type}_{signal.price:.2f}"
                        if signal_key not in last_signal_time or (current_time - last_signal_time[signal_key]).seconds > 30:
                            signal_count += 1
                            last_signal_time[signal_key] = current_time
                            
                            # Get additional analysis
                            ml_prediction = system.ml_predictor.predict_price_movement(df, symbol)
                            sentiment = system.sentiment_analyzer.analyze_sentiment(symbol)
                            price_info = system.exchange_manager.get_best_price(symbol, signal.signal_type)
                            
                            # Display comprehensive signal
                            print(f"🔔 LIVE SIGNAL #{signal_count} - {current_time.strftime('%H:%M:%S')}")
                            print(f"   📊 Symbol: {signal.symbol}")
                            print(f"   🎯 Type: {signal.signal_type.upper()}")
                            print(f"   💰 Price: ${signal.price:,.2f}")
                            print(f"   📈 Strength: {signal.strength:.2f}")
                            print(f"   🎯 Confidence: {signal.confidence:.2f}")
                            print(f"   ⚠️  Risk Score: {signal.risk_score:.2f}")
                            print(f"   🛑 Stop Loss: ${signal.stop_loss:,.2f}")
                            print(f"   🎯 Take Profit: ${signal.take_profit:,.2f}")
                            print(f"   🤖 ML Prediction: {ml_prediction.get('prediction', 0):.3f}")
                            print(f"   📰 Sentiment: {sentiment.get('market_mood', 'neutral')}")
                            print(f"   📋 Conditions: {', '.join(signal.conditions[:3])}")
                            
                            # Risk management check
                            if system.risk_manager.should_trade(signal):
                                position_size = system.risk_manager.calculate_position_size(
                                    signal, system.risk_manager.portfolio_value
                                )
                                print(f"   ✅ TRADE APPROVED - Position Size: {position_size:.4f}")
                                
                                # Execute trade (simulated)
                                system._execute_trade(signal, position_size, price_info)
                                print(f"   💼 TRADE EXECUTED - Order placed successfully!")
                            else:
                                print(f"   ❌ TRADE REJECTED - Risk management rules")
                            
                            # Show arbitrage opportunities
                            arbitrage_opps = system.exchange_manager.detect_arbitrage(symbol)
                            if arbitrage_opps:
                                print(f"   🔄 Arbitrage Opportunities: {len(arbitrage_opps)} found")
                            
                            print("-" * 60)
            
            # Show system status every 30 seconds
            if signal_count % 3 == 0 and signal_count > 0:
                status = system.get_system_status()
                print(f"📊 SYSTEM STATUS UPDATE - {current_time.strftime('%H:%M:%S')}")
                print(f"   💼 Active Positions: {status.get('active_positions', 0)}")
                print(f"   💰 Portfolio Value: ${status.get('risk_metrics', {}).get('portfolio_value', 0):,.2f}")
                print(f"   ⚠️  Risk Level: {status.get('risk_metrics', {}).get('risk_level', 'unknown')}")
                print(f"   📈 Total P&L: ${status.get('risk_metrics', {}).get('total_pnl', 0):,.2f}")
                print()
            
            time.sleep(5)  # Check every 5 seconds for new signals
            
    except KeyboardInterrupt:
        print("\n⏹️  Live signals stopped by user")
    
    # Final summary
    print(f"\n📈 LIVE SIGNALS SUMMARY")
    print(f"   Total Signals Generated: {signal_count}")
    print(f"   Duration: {duration_minutes} minutes")
    print(f"   Average Signals/Minute: {signal_count/duration_minutes:.1f}")
    
    # Show final system status
    final_status = system.get_system_status()
    print(f"\n💰 FINAL PORTFOLIO STATUS")
    print(f"   Active Positions: {final_status.get('active_positions', 0)}")
    print(f"   Portfolio Value: ${final_status.get('risk_metrics', {}).get('portfolio_value', 0):,.2f}")
    print(f"   Total P&L: ${final_status.get('risk_metrics', {}).get('total_pnl', 0):,.2f}")
    print(f"   Risk Level: {final_status.get('risk_metrics', {}).get('risk_level', 'unknown')}")

def show_signal_details():
    """Show detailed information about signal generation process"""
    print("🔍 SIGNAL GENERATION PROCESS")
    print("=" * 40)
    print("1. Real-time data collection")
    print("2. Technical indicator calculation")
    print("3. Signal strength evaluation")
    print("4. Risk assessment")
    print("5. ML prediction integration")
    print("6. Sentiment analysis")
    print("7. Position sizing calculation")
    print("8. Trade execution (simulated)")
    print()

def main():
    """Main function"""
    print("🚀 ENHANCED TRADING SYSTEM - LIVE SIGNALS")
    print("=" * 60)
    
    show_signal_details()
    
    try:
        # Show live signals for 5 minutes
        show_live_trading_signals(duration_minutes=5)
        
        print("\n✅ Live signals demonstration completed!")
        
    except Exception as e:
        print(f"❌ Error: {e}")

if __name__ == "__main__":
    main() 